# -*- coding: utf-8 -*-
"""canadian_zip_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5JpVIwyQjmMJGmJZQ9n3VhrNJ2ywY66
"""



import streamlit as st
import pandas as pd
import io

# ---------- Helper functions ----------


def group_postal_codes(codes):
    """
    Group Canadian postal codes based on the first 3 characters.
    Returns a list of dictionaries with 'start' and 'end' keys.
    """
    grouped = {}
    for code in codes:
        if len(code) != 6:
            continue
        prefix = code[:3]
        suffix = code[3:]
        if prefix not in grouped:
            grouped[prefix] = []
        grouped[prefix].append(suffix)

    result = []
    for prefix, suffixes in grouped.items():
        sorted_suffixes = sorted(suffixes)
        start = f"{prefix}{sorted_suffixes[0]}"
        end = f"{prefix}{sorted_suffixes[-1]}"
        result.append({'start': start, 'end': end})
    return result


def ungroup_postal_codes(start_end_df):
    """
    Expand grouped postal code ranges into individual postal codes.
    Input: DataFrame with 'start' and 'end' columns
    Output: List of individual postal codes
    """
    expanded = []
    for _, row in start_end_df.iterrows():
        start_code = row['start']
        end_code = row['end']
        prefix = start_code[:3]
        start_suffix = start_code[3:]
        end_suffix = end_code[3:]

        # Expand all combinations of 0-9 A-Z 0-9
        for a in string.digits:
            for b in string.ascii_uppercase:
                for c in string.digits:
                    suffix = f"{a}{b}{c}"
                    if start_suffix <= suffix <= end_suffix:
                        expanded.append(f"{prefix}{suffix}")
    return expanded




def convert_df_to_csv(df):
    output = io.StringIO()
    df.to_csv(output, index=False)
    return output.getvalue().encode('utf-8')

# ---------- Streamlit UI ----------

st.title("📍 Canadian Zip Code Group Range / Ungroup Range")

uploaded_file = st.file_uploader("Upload a CSV file with either 'postal_code' or 'start' and 'end' columns", type="csv")

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file)

        action = st.radio("Select Action", ["Group Zip Codes", "Ungroup Zip Codes"])

        if action == "Group Zip Codes":
            if 'postal_code' not in df.columns:
                st.error("❌ The uploaded file must contain a 'postal_code' column.")
                st.stop()
            grouped_result = group_postal_codes(df['postal_code'])
            result_df = pd.DataFrame(grouped_result)  # columns: start, end
            st.success("✅ Zip codes grouped by FSA (first 3 characters).")

        else:  # Ungroup Zip Codes
            if 'start' in df.columns and 'end' in df.columns:
                result = ungroup_postal_codes(df[['start', 'end']])
                result_df = pd.DataFrame(result, columns=["postal_code"])
                st.success("✅ Zip codes ungrouped into individual rows.")
            else:
                st.error("⚠️ The file must contain 'start' and 'end' columns for ungrouping.")
                st.stop()

        st.dataframe(result_df)

        csv = convert_df_to_csv(result_df)
        st.download_button(
            label="📥 Download Result CSV",
            data=csv,
            file_name="processed_postal_codes.csv",
            mime="text/csv"
        )

    except Exception as e:
        st.error(f"Something went wrong: {e}")
