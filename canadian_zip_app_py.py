# -*- coding: utf-8 -*-
"""canadian_zip_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5JpVIwyQjmMJGmJZQ9n3VhrNJ2ywY66
"""



import streamlit as st
import pandas as pd
import io

# ---------- Helper functions ----------

def group_postal_codes(df):
    df['FSA'] = df['postal_code'].str[:3]
    grouped = df.groupby('FSA')['postal_code'].apply(list).reset_index()
    grouped['count'] = grouped['postal_code'].apply(len)
    return grouped

def ungroup_postal_codes(df):
    ungrouped = df.explode('postal_code').reset_index(drop=True)
    return ungrouped

def convert_df_to_csv(df):
    output = io.StringIO()
    df.to_csv(output, index=False)
    return output.getvalue().encode('utf-8')

# ---------- Streamlit UI ----------

st.title("üìç Canadian Zip Code Grouper/Ungrouper")

uploaded_file = st.file_uploader("Upload a CSV file with 'postal_code' column", type="csv")
print(uploaded_file)

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file)
        if 'postal_code' not in df.columns:
            st.error("‚ùå The uploaded file must contain a 'postal_code' column.")
        else:
            action = st.radio("Select Action", ["Group Zip Codes", "Ungroup Zip Codes"])

            if action == "Group Zip Codes":
                result_df = group_postal_codes(df)
                st.success("‚úÖ Zip codes grouped by FSA (first 3 characters).")
            else:
                if 'postal_code' in df.columns and isinstance(df['postal_code'].iloc[0], list):
                    # Already in ungrouped format
                    result_df = ungroup_postal_codes(df)
                elif 'postal_code' in df.columns and df['postal_code'].apply(lambda x: isinstance(x, str) and x.startswith('[')).any():
                    df['postal_code'] = df['postal_code'].apply(eval)  # Convert stringified list back to list
                    result_df = ungroup_postal_codes(df)
                else:
                    st.error("‚ö†Ô∏è The file doesn't look grouped. Upload a grouped file for ungrouping.")
                    st.stop()

                st.success("‚úÖ Zip codes ungrouped into individual rows.")

            st.dataframe(result_df)
  #Download link
            csv = convert_df_to_csv(result_df)
            st.download_button(
                label="üì• Download Result CSV",
                data=csv,
                file_name="processed_postal_codes.csv",
                mime="text/csv"
            )
    except Exception as e:
        st.error(f"Something went wrong: {e}")

#



